@page "/searches/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]
<h3>Searches</h3>
<br />
<br />
@if (Searches == null)
{
    <div class="alert alert-info">Loading Searches...</div>
}
else
{
    <table class="table table-responsive" id="searchesTable">
        <thead>
            <tr>
                <th>Job Name:</th>
                <th>Job Type:</th>
                <th>Job Location:</th>
                <th>Job Id:</th>
                <th>Applicant Name:</th>
                <th>DateCreated:</th>
                <th>Action:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var search in Searches)
            {
                <tr>
                    <td>@search.Src_Job_Name</td>
                    <td>@search.Src_Job_Type</td>
                    <td>@search.Src_Location</td>
                    <td>@search.Job.Id</td>
                    <td>@search.Applicant.A_Name</td>
                    <td>@search.DateCreated</td>

                    <td>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(search.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private List<Search>? Searches;

    protected async override Task OnInitializedAsync()
    {
        Searches = await _client.GetFromJsonAsync<List<Search>>($"{Endpoints.SearchesEndpoint}");
    }

    async Task Delete(int searchid)
    {
        if (Searches != null)
        {
            var search = Searches.First(q => q.Id == searchid);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {search.Src_Job_Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.SearchesEndpoint}/{searchid}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#searchesTable");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#searchesTable");
    }
}
