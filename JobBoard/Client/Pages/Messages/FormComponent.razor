@inject HttpClient _client

<EditForm Model="@message" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
    <div class="form-row">
        <div class="form-group col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <label>Recipient:</label>
                    <InputText @bind-Value="@message.M_Recipient" class="form-control" />
                    <ValidationMessage For="@(() => message.M_Recipient)" />
                </div>
                <div class="col-md-6">
                    <label>Sender:</label>
                    <InputText @bind-Value="@message.M_Sender" class="form-control" />
                    <ValidationMessage For="@(() => message.M_Sender)" />
                </div>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <label>Employer:</label>
                    <InputSelect @bind-Value="@message.EmployerId" class="form-control">
                        <option value="">-- Select Employer --</option>
                        @if (Employers != null)
                        {
                            foreach (var employer in Employers)
                            {
                                <option value="@employer.Id">@employer.E_Email</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() =>message.EmployerId)" />
                </div>
                <div class="col-md-6">
                    <label>Applicant:</label>
                    <InputSelect @bind-Value="@message.ApplicantId" class="form-control">
                        <option value="">-- Select Applicant --</option>
                        @if (Applicants != null)
                        {
                            foreach (var applicant in Applicants)
                            {
                                <option value="@applicant.Id">@applicant.A_Email</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() =>message.ApplicantId)" />
                </div>
            </div>
        </div>
    </div>
    <div class="form-group col">
        <label>Content:</label>
        <div>
            <textarea @bind="@message.M_Content" class="form-control" rows="10" cols="50"></textarea>
            <ValidationMessage For="@(() => message.M_Content)" />
        </div>
    </div>
    <div class="form-group">
        <label>Time Stamp: </label>
        <div>
            <InputDate @bind-Value="@message.M_TimeStamp" class="form-control" />
            <ValidationMessage For="@(() =>message.M_TimeStamp)" />
        </div>
    </div>
    </fieldset>
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                Send
            </button>
        }
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Message? message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Message>? Messages;
    private IList<Employer>? Employers;
    private IList<Applicant>? Applicants;

    protected async override Task OnInitializedAsync()
    {
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoints.EmployersEndpoint}");
        Applicants = await _client.GetFromJsonAsync<List<Applicant>>($"{Endpoints.ApplicantsEndpoint}");
    }
}
