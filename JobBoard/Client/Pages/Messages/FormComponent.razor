@inject HttpClient _client

<EditForm Model="@message" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Content: </label>
            <div>
                <InputText @bind-Value="@message.M_Content" class="form-control" />
                <ValidationMessage For="@(() =>message.M_Content)" />
            </div>
        </div>
        <div class="form-group">
            <label>Recipient Name: </label>
            <div>
                <InputText @bind-Value="@message.M_Recipient" class="form-control" />
                <ValidationMessage For="@(() =>message.M_Recipient)" />
            </div>
        </div>
        <div class="form-group">
            <label>Sender Name: </label>
            <div>
                <InputText @bind-Value="@message.M_Sender" class="form-control" />
                <ValidationMessage For="@(() =>message.M_Sender)" />
            </div>
        </div>
        <div class="form-group">
            <label>Time Stamp: </label>
            <div>
                <InputDate @bind-Value="@message.M_TimeStamp" class="form-control" />
                <ValidationMessage For="@(() =>message.M_TimeStamp)" />
            </div>
        </div>
        <div class="form-group">
            <label>Employer Email: </label>
            <div>
                <InputSelect @bind-Value="@message.EmployerId" class="form-control">
                    <option value="">-- Select Employer --</option>
                    @if (Employers != null)
                    {
                        foreach (var employer in Employers)
                        {
                            <option value="@employer.Id">@employer.E_Email </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() =>message.EmployerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Applicant Email: </label>
            <div>
                <InputSelect @bind-Value="@message.ApplicantId" class="form-control">
                    <option value="">-- Select Applicant --</option>
                    @if (Applicants != null)
                    {
                        foreach (var applicant in Applicants)
                        {
                            <option value="@applicant.Id">@applicant.A_Email </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() =>message.EmployerId)" />
            </div>
        </div>
        </fieldset>
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                Create Message
            </button>
        }
    <BackToList Target="messages" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Message? message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Message>? Messages;
    private IList<Employer>? Employers;
    private IList<Applicant>? Applicants;

    protected async override Task OnInitializedAsync()
    {
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoints.EmployersEndpoint}");
        Applicants = await _client.GetFromJsonAsync<List<Applicant>>($"{Endpoints.ApplicantsEndpoint}");
    }
}
