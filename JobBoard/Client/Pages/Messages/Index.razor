@page "/messages/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]
<a href="/messages/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Messages
</a>
<br />
<br />
@if (Messages == null)
{
    <div class="alert alert-info">Loading Messages...</div>
}
else
{
    <table class="table table-responsive" id="messagesTable">
        <thead>
            <tr>
                <th>Message</th>
                <th>To:</th>
                <th>From:</th>
                <th>At:</th>
                <th>Employer</th>
                <th>Applicant</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in Messages)
            {
                <tr>
                    <td>@message.M_Content</td>
                    <td>@message.M_Recipient</td>
                    <td>@message.M_Sender</td>
                    <td>@message.M_TimeStamp</td>
                    <td>@message.Employer.E_Email</td>
                    <td>@message.Applicant.A_Email</td>
                    <td>
                        <a href="/messages/view/@message.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/messages/edit/@message.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(message.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private List<Message>? Messages;

    protected async override Task OnInitializedAsync()
    {
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
    }

    async Task Delete(int messageid)
    {
        if (Messages != null)
        {
            var message = Messages.First(q => q.Id == messageid);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {message.M_Sender}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.MessagesEndpoint}/{messageid}");
                await OnInitializedAsync();
            }
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#messagesTable");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#messagesTable");
    }
}
