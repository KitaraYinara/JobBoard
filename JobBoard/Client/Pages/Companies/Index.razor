@page "/companies/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<a href="/companies/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Company
</a>

@if (Companies == null)
{
    <div class="alert alert-info">Loading Companies...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>About</th>
                <th>Created By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var company in Companies)
            {
                <tr>
                    <td>@company.C_Name</td>
                    <td>@company.C_Address</td>
                    <td>@company.C_About</td>
                    <td>@company.Admin.Ad_Name</td>
                    <td>
                        <a href="/companies/view/@company.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/companies/edit/@company.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(company.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private List<Company>? Companies;

    protected async override Task OnInitializedAsync()
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");
    }

    async Task Delete(int companyid)
    {
        if (Companies != null)
        {
            var company = Companies.First(q => q.Id == companyid);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {company.C_Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.CompaniesEndpoint}/{companyid}");
                await OnInitializedAsync();
            }
        }
    }
}
