@page "/"
@inject HttpClient _client
@inject NavigationManager _navManager
<PageTitle>EMPLEO</PageTitle>
<head>
    <style>
        body{
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-image: linear-gradient(rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0.75)),url('../Images/ImageForLanding.jpg');
            background-size: cover;
            background-position: center;
        }

        .img_row {
            display: flex;
        }

        .img_column {
            flex: 33.33%;
            padding: 5px;
        }
        .img{
            height:175px;
            width:175px;
        }
     </style>
</head>
<body>
    <center>
    <div class ="text-white"><h1><i><b>EMPLEO</b></i></h1></div>
    <FormComponent ButtonText="Search" search="search" OnValidSubmit="@CreateSearch" />
    <div class="text-white">Trending Jobs:</div>
    <div class="img_row">
            <div class="img_column"><a href="https://localhost:44382/jobs/view/3"><img class="img" src="../Images/Amazon_Logo.jpg" alt="Amazon"></a></div>
            <div class="img_column"><a href="https://localhost:44382/jobs/view/5"><img class="img" src="../Images/Apple_Logo.jpg" alt="Apple"></a></div>
            <div class="img_column"><a href="https://localhost:44382/jobs/view/4"><img class="img" src="../Images/Google_Logo.jpg" alt="Google"></a></div>
    </div>
    </center>
    
</body>

@code {
    Search search = new Search();
    private List<Search> Searches = new List<Search>();
    public Search LatestSearch;

    private async Task CreateSearch()
    {
        await _client.PostAsJsonAsync(Endpoints.SearchesEndpoint, search);

        Searches = await _client.GetFromJsonAsync<List<Search>>($"{Endpoints.SearchesEndpoint}");

        if (Searches != null && Searches.Count > 0)
        {
            LatestSearch = Searches[Searches.Count - 1];
            int? id = LatestSearch.JobId;
            _navManager.NavigateTo($"/jobs/view/{id}");
        }
    }
}


