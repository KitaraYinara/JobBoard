@page "/jobs/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class="card-title"> New jobs</h3>
<hr />
<br />
<EditForm Model="@job" OnValidSubmit="CreateJob">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label> Name: </label>
        <div>
            <InputText @bind-Value="@job.J_Name" class="form-control" />
            <ValidationMessage For="@(() =>job.J_Name)" />
        </div>
    </div>
    <div class="form-group">
        <label> Location: </label>
        <div>
            <InputText @bind-Value="@job.J_Location" class="form-control" />
            <ValidationMessage For="@(() =>job.J_Location)" />
        </div>
    </div>
    <div class="form-group">
        <label> Description: </label>
        <div>
            <InputText @bind-Value="@job.J_Description" class="form-control" />
            <ValidationMessage For="@(() =>job.J_Description)" />
        </div>
    </div>
    <div class="form-group">
        <label> Salary: </label>
        <div>
            <InputNumber @bind-Value="@job.J_Salary" class="form-control" />
            <ValidationMessage For="@(() =>job.J_Salary)" />
        </div>
    </div>
    <div class="form-group">
        <label> Type of Job: </label>
        <div>
            <InputText @bind-Value="@job.J_Type" class="form-control" />
            <ValidationMessage For="@(() =>job.J_Type)" />
        </div>
    </div>
    <div class="form-group">
        <label> Skills Required: </label>
        <div>
            <InputText @bind-Value="@job.J_Skills" class="form-control" />
            <ValidationMessage For="@(() =>job.J_Skills)" />
        </div>
    </div>
    <div class="form-group">
        <label>Employer: </label>
        <div>
            <InputSelect @bind-Value="@job.EmployerId" class="form-control">
                <option value="">-- Select Employer --</option>
                @if (Employers != null)
                {
                    foreach (var employer in Employers)
                    {
                        <option value="@employer.Id">@employer.E_Name </option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() =>job.EmployerId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Industry: </label>
        <div>
            <InputSelect @bind-Value="@job.IndustryId" class="form-control">
                <option value="">-- Select Industry --</option>
                @if (Industries != null)
                {
                    foreach (var industry in Industries)
                    {
                        <option value="@industry.Id">@industry.I_Type </option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() =>@job.IndustryId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Urgent?</label>
        <div>
            <InputCheckbox @bind-Value="@job.J_Urgency" class="form-check-input" />
            <!-- Add optional label for checkbox, if needed -->
            <!-- <label class="form-check-label">Urgent?</label> -->
            <ValidationMessage For="@(() => job.J_Urgency)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Create Job
    </button>
</EditForm>
@code {
    Job job = new Job();

    private IList<Job>? Jobs;
    private IList<Employer>? Employers;
    private IList<Industry>? Industries;

    protected async override Task OnInitializedAsync()
    {
        Jobs = await _client.GetFromJsonAsync<List<Job>>($"{Endpoints.JobsEndpoint}");
        Industries = await _client.GetFromJsonAsync<List<Industry>>($"{Endpoints.IndustriesEndpoint}");
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoints.EmployersEndpoint}");
    }

    private async Task CreateJob()
    {
        await _client.PostAsJsonAsync(Endpoints.JobsEndpoint, job);
        _navManager.NavigateTo("/jobs/");
    }
}
