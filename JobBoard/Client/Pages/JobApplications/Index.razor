@page "/jobapplications/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3>Job Applications</h3>

@if (JobApplications == null)
{
    <div class="alert alert-info">Loading Jobapplications...</div>
}
else
{
    <JAStyle />
    <div class="card-deck">
        @foreach (var jobapplication in JobApplications)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">@jobapplication.Job.J_Name</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@jobapplication.Applicant.A_Name</h6>
                    <p class="card-text">@jobapplication.JA_CoverLetter</p>
                    <div class="card-links">
                        <a href="/jobapplications/view/@jobapplication.Id" class="card-link">View</a>
                        <a href="/jobapplications/edit/@jobapplication.Id" class="card-link">Edit</a>
                        <a @onclick="@(()=>Delete(jobapplication.Id))" class="card-link text-danger">Delete</a>
                    </div>
                </div>
                <div class="card-footer">
                    <small class="text-muted">Status: @jobapplication.JA_Status</small>
                </div>
            </div>
        }
    </div>
}


@code {
    private List<JobApplication>? JobApplications;
    private List<Job>? Jobs;

    protected async override Task OnInitializedAsync()
    {
        JobApplications = await _client.GetFromJsonAsync<List<JobApplication>>($"{Endpoints.JobApplicationsEndpoint}");
        Jobs = await _client.GetFromJsonAsync<List<Job>>($"{Endpoints.JobsEndpoint}");
    }

    async Task Delete(int jobapplicationid)
    {
        if (JobApplications != null)
        {
            var jobapplication = JobApplications.First(q => q.Id == jobapplicationid);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {jobapplication.JobId}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.JobApplicationsEndpoint}/{jobapplicationid}");
                await OnInitializedAsync();
            }
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#jobapplicantsTable");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#jobapplicantsTable");
    }
}

