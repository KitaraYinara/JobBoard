@inject HttpClient _client

<EditForm Model="@jobapplication" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label class="form-label">Job: </label>
            <div class="form-group col-md-3">
                <InputSelect @bind-Value="@jobapplication.JobId" class="form-control">
                    <option value="">-- Select Job --</option>
                    @if (Jobs != null)
                    {
                        foreach (var job in Jobs)
                        {
                            <option value="@job.Id">@job.J_Name </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() =>jobapplication.JobId)" class="validation-message" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <div class="row">
                    <div class="col-md-6">
                        <label>Applicant:</label>
                        <InputSelect @bind-Value="@jobapplication.ApplicantId" class="form-control">
                            <option value="">-- Select Applicant --</option>
                            @if (Applicants != null)
                            {
                                foreach (var applicant in Applicants)
                                {
                                    <option value="@applicant.Id">@applicant.A_Name </option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() =>jobapplication.JobId)" />
                    </div>
                    @*<div class="col-md-6">
                        <label>Status:</label>
                        <InputText @bind-Value="@jobapplication.JA_Status" class="form-control" />
                        <ValidationMessage For="@(() =>jobapplication.JA_Status)" />
                    </div> *@
                </div>
            </div>
        </div>
        <div class="form-group">
            <label> Cover Letter: </label>
            <div>
                <InputTextArea @bind-Value="@jobapplication.JA_CoverLetter" class="form-control" rows="6"></InputTextArea>
                <ValidationMessage For="@(() =>jobapplication.JA_CoverLetter)" />
            </div>
        </div>
        <div class="form-group">
            <label> Resume: </label>
            <div>
                <InputTextArea @bind-Value="@jobapplication.JA_Resume" class="form-control" rows="6"></InputTextArea>
                <ValidationMessage For="@(() =>jobapplication.JA_Resume)" />
            </div>
        </div>

        <div class="form-group">
            <label> Portfolio: </label>
            <div>
                <InputText @bind-Value="@jobapplication.JA_Portfolio" class="form-control" />
                <ValidationMessage For="@(() =>jobapplication.JA_Portfolio)" />
            </div>
        </div>

    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="jobapplications" />
</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public JobApplication? jobapplication { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Job>? Jobs;
    private IList<JobApplication>? JobApplications;
    private IList<Applicant>? Applicants;

    protected async override Task OnInitializedAsync()
    {
        JobApplications = await _client.GetFromJsonAsync<List<JobApplication>>($"{Endpoints.JobApplicationsEndpoint}");
        Jobs = await _client.GetFromJsonAsync<List<Job>>($"{Endpoints.JobsEndpoint}");
        Applicants = await _client.GetFromJsonAsync<List<Applicant>>($"{Endpoints.ApplicantsEndpoint}");
        jobapplication.JA_Status = "Not Yet Approved";
    }
}





